package bigendian_test

import (
	"github.com/reiver/go-endian/big"

	"bytes"
	"math/rand"
	"time"

	"testing"
)

func TestWriteUint64To(t *testing.T) {

	tests := []struct{
		Value uint64
		Expected []byte
	}{
		{
			Value:                                0x0000000000000000,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		},
		{
			Value:                                0x0000000000000001,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01},
		},
		{
			Value:                                0x0000000000000002,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02},
		},
		{
			Value:                                0x0000000000000003,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03},
		},
		{
			Value:                                0x0000000000000004,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04},
		},
		{
			Value:                                0x0000000000000005,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05},
		},
		{
			Value:                                0x0000000000000006,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06},
		},
		{
			Value:                                0x0000000000000007,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07},
		},
		{
			Value:                                0x0000000000000008,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08},
		},
		{
			Value:                                0x0000000000000009,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09},
		},
		{
			Value:                                0x000000000000000a,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a},
		},
		{
			Value:                                0x000000000000000b,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b},
		},
		{
			Value:                                0x000000000000000c,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c},
		},
		{
			Value:                                0x000000000000000d,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d},
		},
		{
			Value:                                0x000000000000000e,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e},
		},
		{
			Value:                                0x000000000000000f,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f},
		},
		{
			Value:                                0x0000000000000010,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10},
		},
		{
			Value:                                0x0000000000000011,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11},
		},
		{
			Value:                                0x0000000000000012,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12},
		},
		{
			Value:                                0x0000000000000013,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13},
		},

		{
			Value:                                0x00000000000000ef,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xef},
		},
		{
			Value:                                0x00000000000000f0,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0},
		},
		{
			Value:                                0x00000000000000f1,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf1},
		},
		{
			Value:                                0x00000000000000f2,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf2},
		},
		{
			Value:                                0x00000000000000f3,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf3},
		},
		{
			Value:                                0x00000000000000f4,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf4},
		},
		{
			Value:                                0x00000000000000f5,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf5},
		},
		{
			Value:                                0x00000000000000f6,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf6},
		},
		{
			Value:                                0x00000000000000f7,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf7},
		},
		{
			Value:                                0x00000000000000f8,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8},
		},
		{
			Value:                                0x00000000000000f9,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf9},
		},
		{
			Value:                                0x00000000000000fa,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfa},
		},
		{
			Value:                                0x00000000000000fb,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfb},
		},
		{
			Value:                                0x00000000000000fc,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc},
		},
		{
			Value:                                0x00000000000000fd,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfd},
		},
		{
			Value:                                0x00000000000000fe,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe},
		},
		{
			Value:                                0x00000000000000ff,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff},
		},
		{
			Value:                                0x0000000000000100,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00},
		},
		{
			Value:                                0x0000000000000101,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01},
		},
		{
			Value:                                0x0000000000000102,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02},
		},
		{
			Value:                                0x0000000000000103,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03},
		},

		{
			Value:                                0x0000000000000245,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x45},
		},

		{
			Value:                                0x00000000000037ae,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x37,0xae},
		},

		{
			Value:                                0x000000000000fffa,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfa},
		},
		{
			Value:                                0x000000000000fffb,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfb},
		},
		{
			Value:                                0x000000000000fffc,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfc},
		},
		{
			Value:                                0x000000000000fffd,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfd},
		},
		{
			Value:                                0x000000000000fffe,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfe},
		},
		{
			Value:                                0x000000000000ffff,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff},
		},
		{
			Value:                                0x0000000000010000,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00},
		},
		{
			Value:                                0x0000000000010001,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01},
		},
		{
			Value:                                0x0000000000010002,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x02},
		},
		{
			Value:                                0x0000000000010003,
			Expected: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x03},
		},

		{
			Value:                                0x000000001357bd24,
			Expected: []byte{0x00,0x00,0x00,0x00,0x13,0x57,0xbd,0x24},
		},

		{
			Value:                                0x00000000ffffffff,
			Expected: []byte{0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff},
		},

		{
			Value:                                0xfedcba9876543210,
			Expected: []byte{0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10},
		},

		{
			Value:                                0xffffffffffffffff,
			Expected: []byte{0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
		},
	}


	{
		randomness := rand.New(rand.NewSource( time.Now().UTC().UnixNano() ))

		const max = 50
		for i:=0; i<max; i++ {
			x64 := randomness.Int63()

			u64 := uint64(x64)

			var b0 byte = uint8((0xff00000000000000 & u64) >> 56)
			var b1 byte = uint8((0x00ff000000000000 & u64) >> 48)
			var b2 byte = uint8((0x0000ff0000000000 & u64) >> 40)
			var b3 byte = uint8((0x000000ff00000000 & u64) >> 32)
			var b4 byte = uint8((0x00000000ff000000 & u64) >> 24)
			var b5 byte = uint8((0x0000000000ff0000 & u64) >> 16)
			var b6 byte = uint8((0x000000000000ff00 & u64) >>  8)
			var b7 byte = uint8( 0x00000000000000ff & u64       )

			test := struct{
				Value uint64
				Expected []byte
			}{
				Value:           u64,
				Expected: []byte{b0, b1, b2, b3, b4, b5, b6, b7},
			}

			tests = append(tests, test)
		}
	}


	for testNumber, test := range tests {

		var buffer bytes.Buffer

		n64, err := bigendian.WriteUint64To(&buffer, test.Value)
		if nil != err {
			t.Errorf("For test #%d, did not expect an error, but actually go one: (%T) %q", testNumber, err, err)
			continue
		}

		if expected, actual := int64(len(test.Expected)), n64; expected != actual {
			t.Errorf("For test #%d, expected %d, but actually got %d.", testNumber, expected, actual)
			continue
		}

		if expected, actual := test.Expected, buffer.Bytes(); !bytes.Equal(expected, actual) {
			t.Errorf("For test #%d,....", testNumber)
			t.Errorf("\tEXPECTED: % v", expected)
			t.Errorf("\tACTUAL:   % v", actual)
			continue
		}
	}
}

func TestReadUint64From(t *testing.T) {

	tests := []struct{
		Value []byte
		Expected uint64
	}{
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
			Expected:                          0x0000000000000000,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01},
			Expected:                          0x0000000000000001,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02},
			Expected:                          0x0000000000000002,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03},
			Expected:                          0x0000000000000003,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04},
			Expected:                          0x0000000000000004,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x05},
			Expected:                          0x0000000000000005,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06},
			Expected:                          0x0000000000000006,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07},
			Expected:                          0x0000000000000007,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08},
			Expected:                          0x0000000000000008,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x09},
			Expected:                          0x0000000000000009,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a},
			Expected:                          0x000000000000000a,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0b},
			Expected:                          0x000000000000000b,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0c},
			Expected:                          0x000000000000000c,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0d},
			Expected:                          0x000000000000000d,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e},
			Expected:                          0x000000000000000e,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f},
			Expected:                          0x000000000000000f,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10},
			Expected:                          0x0000000000000010,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11},
			Expected:                          0x0000000000000011,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x12},
			Expected:                          0x0000000000000012,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x13},
			Expected:                          0x0000000000000013,
		},

		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xef},
			Expected:                          0x00000000000000ef,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0},
			Expected:                          0x00000000000000f0,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf1},
			Expected:                          0x00000000000000f1,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf2},
			Expected:                          0x00000000000000f2,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf3},
			Expected:                          0x00000000000000f3,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf4},
			Expected:                          0x00000000000000f4,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf5},
			Expected:                          0x00000000000000f5,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf6},
			Expected:                          0x00000000000000f6,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf7},
			Expected:                          0x00000000000000f7,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8},
			Expected:                          0x00000000000000f8,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf9},
			Expected:                          0x00000000000000f9,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfa},
			Expected:                          0x00000000000000fa,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfb},
			Expected:                          0x00000000000000fb,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfc},
			Expected:                          0x00000000000000fc,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfd},
			Expected:                          0x00000000000000fd,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe},
			Expected:                          0x00000000000000fe,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff},
			Expected:                          0x00000000000000ff,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00},
			Expected:                          0x0000000000000100,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01},
			Expected:                          0x0000000000000101,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02},
			Expected:                          0x0000000000000102,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x03},
			Expected:                          0x0000000000000103,
		},

		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x45},
			Expected:                          0x0000000000000245,
		},

		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0x37,0xae},
			Expected:                          0x00000000000037ae,
		},

		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfa},
			Expected:                          0x000000000000fffa,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfb},
			Expected:                          0x000000000000fffb,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfc},
			Expected:                          0x000000000000fffc,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfd},
			Expected:                          0x000000000000fffd,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xfe},
			Expected:                          0x000000000000fffe,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff},
			Expected:                          0x000000000000ffff,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00},
			Expected:                          0x0000000000010000,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x01},
			Expected:                          0x0000000000010001,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x02},
			Expected:                          0x0000000000010002,
		},
		{
			Value: []byte{0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x03},
			Expected:                          0x0000000000010003,
		},

		{
			Value: []byte{0x00,0x00,0x00,0x00,0x13,0x57,0xbd,0x24},
			Expected:                          0x000000001357bd24,
		},

		{
			Value: []byte{0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff},
			Expected:                          0x00000000ffffffff,
		},

		{
			Value: []byte{0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10},
			Expected:                          0xfedcba9876543210,
		},

		{
			Value: []byte{0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
			Expected:                          0xffffffffffffffff,
		},
	}


	{
		randomness := rand.New(rand.NewSource( time.Now().UTC().UnixNano() ))

		const max = 50
		for i:=0; i<max; i++ {
			x64 := randomness.Int63()

			u64 := uint64(x64)

			var b0 byte = uint8((0xff00000000000000 & u64) >> 56)
			var b1 byte = uint8((0x00ff000000000000 & u64) >> 48)
			var b2 byte = uint8((0x0000ff0000000000 & u64) >> 40)
			var b3 byte = uint8((0x000000ff00000000 & u64) >> 32)
			var b4 byte = uint8((0x00000000ff000000 & u64) >> 24)
			var b5 byte = uint8((0x0000000000ff0000 & u64) >> 16)
			var b6 byte = uint8((0x000000000000ff00 & u64) >>  8)
			var b7 byte = uint8( 0x00000000000000ff & u64       )

			test := struct{
				Value []byte
				Expected uint64
			}{
				Value: []byte{b0,b1,b2,b3,b4,b5,b6,b7},
				Expected:     u64,
			}

			tests = append(tests, test)
		}
	}


	for testNumber, test := range tests {

		var buffer bytes.Buffer

		buffer.Write(test.Value)

		var actual uint64

		n64, err := bigendian.ReadUint64From(&buffer, &actual)
		if nil != err {
			t.Errorf("For test #%d, did not expect an error, but actually go one: (%T) %q", testNumber, err, err)
			continue
		}

		if expected, actual := int64(len(test.Value)), n64; expected != actual {
			t.Errorf("For test #%d, expected %d, but actually got %d.", testNumber, expected, actual)
			continue
		}

		if expected := test.Expected; expected != actual {
			t.Errorf("For test #%d, expected 0x%X, but actually got 0x%X.", testNumber, expected, actual)
			continue
		}
	}
}
